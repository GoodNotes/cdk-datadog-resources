// This file was autogenerated by `yarn create-typescript-types`. DO NOT MODIFY

/**
 * Data source for event platform-based queries.
 */
export type MonitorFormulaAndFunctionEventAggregation =
  | "count"
  | "cardinality"
  | "median"
  | "pc75"
  | "pc90"
  | "pc95"
  | "pc98"
  | "pc99"
  | "sum"
  | "min"
  | "max"
  | "avg";

/**
 * Datadog Monitor 4.6.0
 */
export interface DatadogMonitorProps {
  creator?: Creator;
  /**
   * ID of the monitor
   */
  id?: number;
  /**
   * A message to include with notifications for the monitor
   */
  message?: string;
  /**
   * Name of the monitor
   */
  name?: string;
  /**
   * Tags associated with the monitor
   */
  tags?: string[];
  /**
   * Integer from 1 (high) to 5 (low) indicating alert severity.
   */
  priority?: number;
  options?: MonitorOptions;
  /**
   * The monitor query
   */
  query?: string;
  /**
   * The type of the monitor
   */
  type?:
    | "audit alert"
    | "composite"
    | "event alert"
    | "event-v2 alert"
    | "log alert"
    | "metric alert"
    | "process alert"
    | "query alert"
    | "service check"
    | "synthetics alert"
    | "trace-analytics alert"
    | "slo alert"
    | "rum alert"
    | "ci-pipelines alert"
    | "error-tracking alert"
    | "ci-tests alert";
  /**
   * Whether or not the monitor is multi alert
   */
  multi?: boolean;
  /**
   * Date of creation of the monitor
   */
  created?: string;
  /**
   * Date of deletion of the monitor
   */
  deleted?: string;
  /**
   * Date of modification of the monitor
   */
  modified?: string;
  /**
   * A list of unique role identifiers to define which roles are allowed to edit the monitor. The unique identifiers for all roles can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) and are located in the `data.id` field. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. `restricted_roles` is the successor of `locked`. For more information about `locked` and `restricted_roles`, see the [monitor options docs](https://docs.datadoghq.com/monitors/guide/monitor_api_options/#permissions-options).
   */
  restrictedRoles?: string[];
}
export interface Creator {
  /**
   * Name of the creator of the monitor
   */
  name?: string;
  /**
   * Handle of the creator of the monitor
   */
  handle?: string;
  /**
   * Email of the creator of the monitor
   */
  email?: string;
}
/**
 * The monitor options
 */
export interface MonitorOptions {
  /**
   * Whether or not to include a sample of the logs
   */
  enableLogsSample?: boolean;
  /**
   * Message to include with a re-notification when renotify_interval is set
   */
  escalationMessage?: string;
  /**
   * Time in seconds to delay evaluation
   */
  evaluationDelay?: number;
  /**
   * Whether or not to include triggering tags into notification title
   */
  includeTags?: boolean;
  /**
   * Whether or not changes to this monitor should be restricted to the creator or admins
   */
  locked?: boolean;
  /**
   * Number of locations allowed to fail before triggering alert
   */
  minLocationFailed?: number;
  /**
   * Time in seconds to allow a host to start reporting data before starting the evaluation of monitor results
   */
  newHostDelay?: number;
  /**
   * Number of minutes data stopped reporting before notifying
   */
  noDataTimeframe?: number;
  /**
   * Whether or not to notify tagged users when changes are made to the monitor
   */
  notifyAudit?: boolean;
  /**
   * Whether or not to notify when data stops reporting
   */
  notifyNoData?: boolean;
  /**
   * Number of minutes after the last notification before the monitor re-notifies on the current status
   */
  renotifyInterval?: number;
  /**
   * Whether or not the monitor requires a full window of data before it is evaluated
   */
  requireFullWindow?: boolean;
  /**
   * ID of the corresponding synthetics check
   */
  syntheticsCheckId?: number;
  thresholds?: MonitorThresholds;
  thresholdWindows?: MonitorThresholdWindows;
  /**
   * Number of hours of the monitor not reporting data before it automatically resolves
   */
  timeoutH?: number;
  /**
   * The number of times re-notification messages should be sent on the current status at the provided re-notification interval.
   */
  renotifyOccurrences?: number;
  /**
   * The types of monitor statuses for which re-notification messages are sent.
   */
  renotifyStatuses?: ("alert" | "no data" | "warn")[];
  /**
   * How long the test should be in failure before alerting (integer, number of seconds, max 7200).
   */
  minFailureDuration?: number;
  /**
   * Time (in seconds) to skip evaluations for new groups. For example, this option can be used to skip evaluations for new hosts while they initialize. Must be a non negative integer.
   */
  newGroupDelay?: number;
  /**
   * List of requests that can be used in the monitor query.
   */
  variables?: MonitorFormulaAndFunctionEventQueryDefinition[];
}
/**
 * The threshold definitions
 */
export interface MonitorThresholds {
  /**
   * Threshold value for triggering an alert
   */
  critical?: number;
  /**
   * Threshold value for recovering from an alert state
   */
  criticalRecovery?: number;
  /**
   * Threshold value for recovering from an alert state
   */
  ok?: number;
  /**
   * Threshold value for triggering a warning
   */
  warning?: number;
  /**
   * Threshold value for recovering from a warning state
   */
  warningRecovery?: number;
}
/**
 * The threshold window definitions
 */
export interface MonitorThresholdWindows {
  /**
   * How long a metric must be anomalous before triggering an alert
   */
  triggerWindow?: string;
  /**
   * How long an anomalous metric must be normal before recovering from an alert state
   */
  recoveryWindow?: string;
}
/**
 * A formula and functions events query.
 */
export interface MonitorFormulaAndFunctionEventQueryDefinition {
  /**
   * Threshold value for triggering an alert.
   */
  dataSource?: "rum" | "ci_pipelines" | "ci_tests" | "audit" | "events" | "logs" | "spans";
  /**
   * Search options.
   */
  search?: {
    /**
     * The monitor query.
     */
    query?: string;
  };
  /**
   * An array of index names to query in the stream. Omit or use `[]` to query all indexes at once.
   */
  indexes?: string[];
  /**
   * Compute options.
   */
  compute?: {
    aggregation?: MonitorFormulaAndFunctionEventAggregation;
    /**
     * A time interval in milliseconds.
     */
    interval?: number;
    /**
     * Measurable attribute to compute.
     */
    metric?: string;
  };
  /**
   * Group by options.
   */
  groupBy?: MonitorFormulaAndFunctionEventQueryGroupBy[];
  /**
   * Name of the monitor
   */
  name?: string;
}
/**
 * Credentials for the Datadog API
 */
export interface MonitorFormulaAndFunctionEventQueryGroupBy {
  /**
   * Event facet.
   */
  facet?: string;
  /**
   * Event facet.
   */
  limit?: number;
  /**
   * Options for sorting group by results.
   */
  sort?: {
    aggregation?: MonitorFormulaAndFunctionEventAggregation;
    /**
     * Options for sorting group by results.
     */
    metric?: string;
    /**
     * Direction of sort.
     */
    order?: "asc" | "desc";
  };
}
