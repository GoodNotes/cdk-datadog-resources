const js = require('json-schema-to-typescript')
const camelcaseKeys = require('camelcase-keys')
const fs = require('fs')
const schema = JSON.parse(fs.readFileSync('../cf-schema/datadog-monitor-4.6.0.json').toString())

moveDeclarationToType(schema, 'MonitorFormulaAndFunctionEventQueryGroupBy', 'Sort')
moveDeclarationToType(schema, 'MonitorFormulaAndFunctionEventQueryDefinition', 'Search')
moveDeclarationToType(schema, 'MonitorFormulaAndFunctionEventQueryDefinition', 'Compute')


const convertedSchema = camelcaseKeys(schema, {
  deep: true,
  pascalCase: false,
})

// Definitions in the json schema type are types
convertedSchema.definitions = camelcaseKeys(convertedSchema.definitions, {
  deep: false,
  pascalCase: true
})

// when converting to camel case OK -> ok, but ok -> oK !== OK
convertedSchema.definitions.MonitorThresholds.properties.oK = convertedSchema.definitions.MonitorThresholds.properties.ok
delete convertedSchema.definitions.MonitorThresholds.properties.ok

js.compile(convertedSchema, 'DatadogMonitorProps', {bannerComment: '// This file was autogenerated by `yarn create-typescript-types`. DO NOT MODIFY\n'})
  .then((ts) => {
    // jsii will complain about not read only properties
    // But the library json-schema-to-typescript does not support readonly properties
    const readonlyTs = ts.replaceAll(/^( +)([a-z])/mg, '$1readonly $2')
    fs.writeFileSync('../src/monitors/datadog-monitor-schema.ts',  readonlyTs)
  })


function moveDeclarationToType (schema, parentClass, className) {
  const newName = parentClass + className
  const definition = schema.definitions[parentClass].properties[className]
  schema.definitions[newName] = definition
  schema.definitions[parentClass].properties[className] = {"$ref": `#/definitions/${newName}`}

}